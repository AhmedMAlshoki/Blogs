type LoginResponse {
    token: String!
    user: User!
}

type Query {

    users: [User]
    user(id: ID!): User
    followers(userId: ID!): [User]
    followingList(userId: ID!): [User]
    userProfile(userId: ID!): User!


    post(id: ID!): Post
    postsByUser(userId: ID!): [Post]
    postsByFollowing(userId: ID!): [Post]
    searchPosts(
        query: String   # Full-text search term
        authorIds: [ID!]
        minDate: Date
        maxDate: Date
        first: Int = 20 # Pagination (default 20 items)
        after: Int   # Cursor for pagination
    ): [Post]!


    commentsByPost(postId: ID!): [Comment]
    commentsByUser(userId: ID!): [Comment]
}

type Mutation {
   saveNewComment(postId: ID!, body: String!): Comment

    updateComment(body: String!,commentId: ID!,): String

    deleteComment(commentId: ID!): String

    saveNewPost(title: String!, body: String!): Post

    updatePost(postId: ID!, title: String!, body: String!): Post

    deletePost(postId: ID!): String

    saveNewLike(postId: ID!): String

    deleteLike(postId: ID!): String

    followUser(userId: ID!): String

    unfollowUser(userId: ID!): String

    register(username: String!, password: String!, email: String, displayName: String): String

    updateUser(username: String!, password: String!, email: String, displayName: String): User

    deleteUser(userId: ID!): String

    login(email: String!, password: String!): LoginResponse!

}





type User {
    id: ID!
    username: String!
    displayName: String
    createdAt: Date
    posts: [Post]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    createdAt: Date!
    user: User
    likes: [Like]!
    comments: [Comment]
}

type Like {
    id: ID!
    postId: ID!
    userId: ID!
}

type Comment {
    id: ID!
    body: String
    postId: ID!
    userId: ID!
}



# Custom scalar for ISO 8601 dates (e.g., "2023-10-05T14:48:00Z")
scalar Date